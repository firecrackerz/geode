// generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Bitwise expressions ] =================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#bitwise-binary-operations

package ast

// --- [ shl ] -----------------------------------------------------------------

// ExprShl represents a shift left expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#shl-instruction
type ExprShl struct {
	// Type of the constant expression.
	Type Type
	// Operands.
	X, Y Constant
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*ExprShl) isValue() {}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprShl) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprShl) isConstExpr() {}

// isMetadataNode ensures that only metadata nodes can be assigned to the
// ast.MetadataNode interface.
func (*ExprShl) isMetadataNode() {}

// --- [ lshr ] ----------------------------------------------------------------

// ExprLShr represents a logical shift right expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#lshr-instruction
type ExprLShr struct {
	// Type of the constant expression.
	Type Type
	// Operands.
	X, Y Constant
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*ExprLShr) isValue() {}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprLShr) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprLShr) isConstExpr() {}

// isMetadataNode ensures that only metadata nodes can be assigned to the
// ast.MetadataNode interface.
func (*ExprLShr) isMetadataNode() {}

// --- [ ashr ] ----------------------------------------------------------------

// ExprAShr represents an arithmetic shift right expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#ashr-instruction
type ExprAShr struct {
	// Type of the constant expression.
	Type Type
	// Operands.
	X, Y Constant
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*ExprAShr) isValue() {}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprAShr) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprAShr) isConstExpr() {}

// isMetadataNode ensures that only metadata nodes can be assigned to the
// ast.MetadataNode interface.
func (*ExprAShr) isMetadataNode() {}

// --- [ and ] -----------------------------------------------------------------

// ExprAnd represents an AND expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#and-instruction
type ExprAnd struct {
	// Type of the constant expression.
	Type Type
	// Operands.
	X, Y Constant
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*ExprAnd) isValue() {}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprAnd) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprAnd) isConstExpr() {}

// isMetadataNode ensures that only metadata nodes can be assigned to the
// ast.MetadataNode interface.
func (*ExprAnd) isMetadataNode() {}

// --- [ or ] ------------------------------------------------------------------

// ExprOr represents an OR expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#or-instruction
type ExprOr struct {
	// Type of the constant expression.
	Type Type
	// Operands.
	X, Y Constant
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*ExprOr) isValue() {}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprOr) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprOr) isConstExpr() {}

// isMetadataNode ensures that only metadata nodes can be assigned to the
// ast.MetadataNode interface.
func (*ExprOr) isMetadataNode() {}

// --- [ xor ] -----------------------------------------------------------------

// ExprXor represents an exclusive-OR expression.
//
// References:
//    http://llvm.org/docs/LangRef.html#xor-instruction
type ExprXor struct {
	// Type of the constant expression.
	Type Type
	// Operands.
	X, Y Constant
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*ExprXor) isValue() {}

// isConstant ensures that only constants can be assigned to the ast.Constant
// interface.
func (*ExprXor) isConstant() {}

// isConstExpr ensures that only constant expressions can be assigned to the
// ast.ConstExpr interface.
func (*ExprXor) isConstExpr() {}

// isMetadataNode ensures that only metadata nodes can be assigned to the
// ast.MetadataNode interface.
func (*ExprXor) isMetadataNode() {}
