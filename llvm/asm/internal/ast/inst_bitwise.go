// Code generated by gen.go using 'go generate'; DO NOT EDIT.

// === [ Bitwise instructions ] ================================================
//
// References:
//    http://llvm.org/docs/LangRef.html#bitwise-binary-operations

package ast

// --- [ shl ] -----------------------------------------------------------------

// InstShl represents a shift left instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#shl-instruction
type InstShl struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y Value
	// Metadata attached to the instruction.
	Metadata []*AttachedMD
}

// GetName returns the name of the value.
func (inst *InstShl) GetName() string {
	return inst.Name
}

// SetName sets the name of the value.
func (inst *InstShl) SetName(name string) {
	inst.Name = name
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstShl) isValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstShl) isInst() {}

// --- [ lshr ] ----------------------------------------------------------------

// InstLShr represents a logical shift right instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#lshr-instruction
type InstLShr struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y Value
	// Metadata attached to the instruction.
	Metadata []*AttachedMD
}

// GetName returns the name of the value.
func (inst *InstLShr) GetName() string {
	return inst.Name
}

// SetName sets the name of the value.
func (inst *InstLShr) SetName(name string) {
	inst.Name = name
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstLShr) isValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstLShr) isInst() {}

// --- [ ashr ] ----------------------------------------------------------------

// InstAShr represents an arithmetic shift right instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#ashr-instruction
type InstAShr struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y Value
	// Metadata attached to the instruction.
	Metadata []*AttachedMD
}

// GetName returns the name of the value.
func (inst *InstAShr) GetName() string {
	return inst.Name
}

// SetName sets the name of the value.
func (inst *InstAShr) SetName(name string) {
	inst.Name = name
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstAShr) isValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstAShr) isInst() {}

// --- [ and ] -----------------------------------------------------------------

// InstAnd represents an AND instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#and-instruction
type InstAnd struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y Value
	// Metadata attached to the instruction.
	Metadata []*AttachedMD
}

// GetName returns the name of the value.
func (inst *InstAnd) GetName() string {
	return inst.Name
}

// SetName sets the name of the value.
func (inst *InstAnd) SetName(name string) {
	inst.Name = name
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstAnd) isValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstAnd) isInst() {}

// --- [ or ] ------------------------------------------------------------------

// InstOr represents an OR instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#or-instruction
type InstOr struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y Value
	// Metadata attached to the instruction.
	Metadata []*AttachedMD
}

// GetName returns the name of the value.
func (inst *InstOr) GetName() string {
	return inst.Name
}

// SetName sets the name of the value.
func (inst *InstOr) SetName(name string) {
	inst.Name = name
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstOr) isValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstOr) isInst() {}

// --- [ xor ] -----------------------------------------------------------------

// InstXor represents an exclusive-OR instruction.
//
// References:
//    http://llvm.org/docs/LangRef.html#xor-instruction
type InstXor struct {
	// Name of the local variable associated with the instruction.
	Name string
	// Operands.
	X, Y Value
	// Metadata attached to the instruction.
	Metadata []*AttachedMD
}

// GetName returns the name of the value.
func (inst *InstXor) GetName() string {
	return inst.Name
}

// SetName sets the name of the value.
func (inst *InstXor) SetName(name string) {
	inst.Name = name
}

// isValue ensures that only values can be assigned to the ast.Value interface.
func (*InstXor) isValue() {}

// isInst ensures that only instructions can be assigned to the ast.Instruction
// interface.
func (*InstXor) isInst() {}
